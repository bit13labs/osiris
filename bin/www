#!/usr/bin/env node
const path = require('path');
const fs = require('fs');
const envFile = path.join(__dirname, '../.env');
try {
  fs.accessSync(envFile, fs.F_OK);
  console.log("loading .env file");
  require('dotenv').config({path: envFile});
} catch (e) {
  // no env file
}
const config = require('../config');
/**
 * Module dependencies.
 */
const app = require('../server');
const debug = require('debug')('glucose-info:server');
const http = require('http');

const SerialPort = require('serialport');
const parser = require('../lib/gcode/parser');


/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
/**
 * Create HTTP server.
 */
const server = http.createServer(app);
/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }
  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}
/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  let addr = server.address();
  let bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;



	let port = new SerialPort('COM4', {
		autoOpen: true,
		baudRate: 250000,
		parser: SerialPort.parsers.readline("\n")
	});

	// the open event will always be emitted
	port.on('open', function() {
		console.log("open");
	});

	port.on('data', function(data) {
		let pdata = parser.parse(data);
		if(pdata) {
			console.log(pdata);
		}
	});

	port.on('error', function(err) {
		console.log('Error: ', err.message);
	});
}
