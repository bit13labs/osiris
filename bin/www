#!/usr/bin/env node
const path = require('path');
const fs = require('fs');
const envFile = path.join(__dirname, '../.env');
try {
  fs.accessSync(envFile, fs.F_OK);
  console.log("loading .env file");
  require('dotenv').config({path: envFile});
} catch (e) {
  // no env file
}
const config = require('../config');
/**
 * Module dependencies.
 */
const app = require('../server');
const debug = require('debug')('glucose-info:server');
const http = require('http');

// const SerialPort = require('serialport');
// const parser = require('../lib/gcode/parser');
//const communication = require('../lib/printer/communication');

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
/**
 * Create HTTP server.
 */
const server = http.createServer(app);
/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }
  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

import HomeCommand from '../lib/printer/commands/home.command'
import VirtualPrinter from '../lib/printer/virtual'
import SerialPrinter from '../lib/printer/serial'
import winston from 'winston'

// Register class with DI container under 'printer' name
config.container.service('printer', VirtualPrinter)
config.container.service('logger', () => {
  var logger = new (winston.Logger)({
    transports: [
      new (winston.transports.Console)({
        level: 'silly'
      })
    ]
  })
  return logger;
})


function onListening() {
  let addr = server.address();
  let bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;

	//communication.open(config.serial.port, {
	//	autoOpen: true,
	//	baudRate: config.serial.baudRate
	//});
  
  let cmd = new HomeCommand();
  cmd.execute().then(
    () => { console.log('Success') },
    (err) => { console.log(err) }
  )
  //let printer = new SerialPrinter({ autoOpen: true });
}
